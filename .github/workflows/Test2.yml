name: E2E Regression Tests On Gui Remotely

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        browser: [Chrome, Edge, Firefox]
        test: [
          "CheckoutTests.CheckoutProductOnGUI,ContactUsTests.SubmitContactUsRequest",
          "AddToCartTests.AddToCartWithSearchOnGUI",
          "LoginTests.LoginWithExistingUserOnGUI",
          "CheckoutTests.CheckoutProductOnAPI",
          "AddToCartTests.AddToCartWithSearchOnAPI",
          "SearchProductTests.SearchForProductOnAPI"
        ]
    continue-on-error: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.4

      - name: Set up MySQL Server with Docker Containers
        run: |
          docker run --name dockerDB -p 3306:3306 -e MYSQL_ROOT_PASSWORD=yehia -d mysql && \
          sleep 10 && \
          docker cp src/test/resources/DBFiles/ProductsAndUsers.sql dockerDB:/ProductsAndUsers.sql && \
          docker exec -i dockerDB mysql -u root -p'yehia' -e "SOURCE /ProductsAndUsers.sql;"

      - name: Set up Selenium Grid with Docker Containers
        run: |
          docker compose -f src/main/resources/docker-compose-v3.yml up --scale chrome=${{ matrix.browser == 'Chrome' && '2' || '0' }} \
          --scale edge=${{ matrix.browser == 'Edge' && '2' || '0' }} \
          --scale firefox=${{ matrix.browser == 'Firefox' && '2' || '0' }} -d

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec dockerDB mysql -u root -pyehia -e "SELECT 1;" >/dev/null 2>&1; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done

      - name: Check Running Containers
        run: docker ps

      - name: Run tests
        continue-on-error: true
        run: |
          mvn clean test -Dtest="${{ matrix.test }}" \
          -DexecutionType="${{ matrix.os == 'ubuntu-latest' && 'Remote' || 'Local' }}" \
          -DbrowserType="${{ matrix.browser }}" \
          -DisHeadless="true" -DsyncWithDB="${{ matrix.os == 'ubuntu-latest' && 'true' || 'false' }}" \
          -D"allure.results.directory"="target/allure-results"

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser | lower }}_${{ matrix.os | lower }}
          path: target/allure-results

      - name: Cleanup Docker Containers
        if: always()
        run: |
          docker compose -f src/main/resources/docker-compose-v3.yml down && docker stop dockerDB

  Combine_Allure_Reports:
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Install Allure
        run: |
          curl -o allure.zip -L "https://github.com/allure-framework/allure2/releases/latest/download/allure-2.30.0.zip"
          unzip allure.zip
          sudo mv allure-2.30.0 /opt/allure
          echo "/opt/allure/bin" >> $GITHUB_PATH

      # Download and combine Allure results
      - name: Download and Combine Allure results
        run: |
          mkdir -p ./allure-results
          for browser in chrome edge firefox; do
            for os in ubuntu windows; do
              if [ -d "./allure-results-${browser}_${os}" ]; then
                cp -r ./allure-results-${browser}_${os}/* ./allure-results/
              fi
            done
          done

      - name: Generate Allure report
        run: allure generate ./allure-results --clean -o ./allure-report

      - name: Upload Combined Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: Combined_Allure_Report
          path: ./allure-report
