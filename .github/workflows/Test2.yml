name: e2eTest2

on:
  workflow_dispatch:

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        browser: [chrome, edge, firefox]
        os: [ubuntu-latest, windows-latest]
        include:
          - browser: chrome
            os: ubuntu-latest
            test: "CheckoutTests.CheckoutProductOnGUI,ContactUsTests.SubmitContactUsRequest"
            headless: true
            executionType: "Remote"
            syncWithDB: true
          - browser: edge
            os: ubuntu-latest
            test: "AddToCartTests.AddToCartWithSearchOnGUI"
            headless: true
            executionType: "Remote"
            syncWithDB: true
          - browser: firefox
            os: ubuntu-latest
            test: "LoginTests.LoginWithExistingUserOnGUI"
            headless: true
            executionType: "Remote"
            syncWithDB: true
          - browser: chrome
            os: windows-latest
            test: "CheckoutTests.CheckoutProductOnAPI"
            headless: true
            executionType: "Local"
            syncWithDB: false
          - browser: edge
            os: windows-latest
            test: "AddToCartTests.AddToCartWithSearchOnAPI"
            headless: true
            executionType: "Local"
            syncWithDB: false
          - browser: firefox
            os: windows-latest
            test: "SearchProductTests.SearchForProductOnAPI"
            headless: true
            executionType: "Local"
            syncWithDB: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.4

      - name: Set up MySQL Server with Docker
        run: |
          docker run --name dockerDB -p 3306:3306 -e MYSQL_ROOT_PASSWORD=yehia -d mysql
          sleep 10
          docker cp src/test/resources/DBFiles/ProductsAndUsers.sql dockerDB:/ProductsAndUsers.sql
          docker exec -i dockerDB mysql -u root -p'yehia' -e "SOURCE /ProductsAndUsers.sql;"

      - name: Set up Selenium Grid with Docker
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            docker compose -f src/main/resources/docker-compose-v3.yml up --scale chrome=$(if [ "${{ matrix.browser }}" == "chrome" ]; then echo 2; else echo 0; fi) --scale edge=$(if [ "${{ matrix.browser }}" == "edge" ]; then echo 2; else echo 0; fi) --scale firefox=$(if [ "${{ matrix.browser }}" == "firefox" ]; then echo 2; else echo 0; fi) -d
          fi

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec dockerDB mysql -u root -p'yehia' -e "SELECT 1;" >/dev/null 2>&1; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done

      - name: Check Running Containers
        run: docker ps

      - name: Run tests
        run: |
          mvn clean test -Dtest="${{ matrix.test }}" -DexecutionType="${{ matrix.executionType }}" -DbrowserType="${{ matrix.browser }}" -DisHeadless="${{ matrix.headless }}" -DsyncWithDB="${{ matrix.syncWithDB }}" -D"allure.results.directory"="target/allure-results"

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}_${{ matrix.os }}
          path: target/allure-results

      - name: Cleanup Docker Containers
        if: always()
        run: |
          docker compose -f src/main/resources/docker-compose-v3.yml down
          docker stop dockerDB

  Combine_Allure_Reports:
    runs-on: ubuntu-latest
    needs: Test
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0

      - name: Install Allure
        run: |
          curl -o allure.zip -L "https://github.com/allure-framework/allure2/releases/latest/download/allure-2.30.0.zip"
          unzip allure.zip
          sudo mv allure-2.30.0 /opt/allure
          echo "/opt/allure/bin" >> $GITHUB_PATH

      # Download and combine Allure results
      - name: Download Allure results
        run: |
          mkdir -p ./allure-results
          for browser in chrome edge firefox; do
            for os in ubuntu-latest windows-latest; do
              if [ -d "./allure-results-$browser_$os" ]; then
                cp -r ./allure-results-$browser_$os/* ./allure-results/
              fi
            done
          done

      - name: Generate Allure report
        run: allure generate ./allure-results --clean -o ./allure-report

      - name: Upload Combined Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: Combined_Allure_Report
          path: ./allure-report
